@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@if (Anchor is not null)
{
    <span style="display: inline-block" @ref="_anchorRef">
        @Anchor
    </span>
}

@if (Open)
{
    <PopperPortal>
        <span @ref="_contentRef">
            @Content
        </span>
    </PopperPortal>
}

@code {
    [Parameter] public RenderFragment? Anchor { get; set; }
    [Parameter, EditorRequired] public RenderFragment Content { get; set; } = default!;
    [Parameter] public bool AutoClose { get; set; }
    [Parameter] public (int x, int y)? Offset { get; set; }
    [Parameter] public Modifier[] Modifiers { get; set; } = { };

    [Parameter] public bool Open { get; set; }
    [Parameter] public EventCallback<bool> OpenChanged { get; set; }

    [Parameter] public Placement Placement { get; set; }
    
    private Guid _instanceId = Guid.NewGuid();

    private bool? _wasOpen;
    private PopperParameters? _previousParameters;
    
    private ElementReference _anchorRef;
    private ElementReference _contentRef;

    private PopperInterop _popperInterop;

    protected override void OnInitialized()
    {
        _popperInterop = new PopperInterop(JSRuntime);
        _popperInterop.OnClosed += HidePopper;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //TODO: work out why this is necessary
        await Task.Yield();

        var hasRendered = false;
        
        if (Open && (!_wasOpen.HasValue || !_wasOpen.Value))
        {
            //Wasn't open, now is
            Console.WriteLine("Wasn't open, now is");
            await _popperInterop.Create(_instanceId, _anchorRef, _contentRef, Placement, GetModifiers(), AutoClose);
            hasRendered = true;
        }
        if (!Open && _wasOpen.HasValue && _wasOpen.Value)
        {
            //Was open, now isn't
            Console.WriteLine("Was open, now isn't");
            await _popperInterop.Destroy(_instanceId);
        }
        
        //Properties have changed, need to update popper instance
        if (!hasRendered && Open && OptionsHaveChanged())
        {
            await _popperInterop.Update(_instanceId, _contentRef, Placement, GetModifiers(), Open && AutoClose);
        }

        _wasOpen = Open;
        _previousParameters = new PopperParameters()
        {
            AutoClose = AutoClose,
            Modifiers = Modifiers,
            Offset = Offset,
            Placement = Placement
        };
    }

    private bool OptionsHaveChanged()
    {
        if (_previousParameters is not null)
        {
            var newParameters = new PopperParameters()
            {
                AutoClose = AutoClose,
                Modifiers = Modifiers,
                Offset = Offset,
                Placement = Placement
            };
            return !newParameters.Equals(_previousParameters);
        }
        
        return false;
    }

    private Modifier[] GetModifiers()
    {
        var modifiers = new List<Modifier>(Modifiers);
        if (Offset.HasValue)
        {
            modifiers.Add(new OffsetModifier(Offset.Value.x, Offset.Value.y));
        }
        return modifiers.ToArray();
    }

    private async Task HidePopper()
    {
        Open = false;
        await OpenChanged.InvokeAsync(Open);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await _popperInterop.Destroy(_instanceId);
        await _popperInterop.DisposeAsync();
    }

}
